@use "sass:math";
@use "sass:meta";
@use "../variables.scss" as variables;
//variables.
// Name:            Table
// Description:     Styles for tables
//
// Component:       `uk-table`
//
// Modifiers:       `uk-table-middle`
//                  `uk-table-divider`
//                  `uk-table-striped`
//                  `uk-table-hover`
//                  `uk-table-small`
//                  `uk-table-justify`
//                  `uk-table-shrink`
//                  `uk-table-expand`
//                  `uk-table-link`
//                  `uk-table-responsive`
//
// States:          `uk-active`
//
// ========================================================================


// Variables
// ========================================================================














/* ========================================================================
   Component: Table
 ========================================================================== */

/*
 * 1. Remove most spacing between table cells.
 * 2. Behave like a block element
 * 3. Style
 */

.uk-table {
    /* 1 */
    border-collapse: collapse;
    border-spacing: 0;
    /* 2 */
    width: 100%;
    /* 3 */
    margin-bottom: variables.$table-margin-vertical;
    @if(meta.mixin-exists(hook-table)) {@include hook-table();}
}

/* Add margin if adjacent element */
* + .uk-table { margin-top: variables.$table-margin-vertical; }


/* Header cell
 ========================================================================== */

/*
 * 1. Style
 */

.uk-table th {
    padding: variables.$table-cell-padding-vertical variables.$table-cell-padding-horizontal;
    text-align: left;
    vertical-align: bottom;
    /* 1 */
    font-size: variables.$table-header-cell-font-size;
    font-weight: variables.$table-header-cell-font-weight;
    color: variables.$table-header-cell-color;
    @if(meta.mixin-exists(hook-table-header-cell)) {@include hook-table-header-cell();}
}


/* Cell
 ========================================================================== */

.uk-table td {
    padding: variables.$table-cell-padding-vertical variables.$table-cell-padding-horizontal;
    vertical-align: top;
    @if(meta.mixin-exists(hook-table-cell)) {@include hook-table-cell();}
}

/*
 * Remove margin from the last-child
 */

.uk-table td > :last-child { margin-bottom: 0; }


/* Footer
 ========================================================================== */

.uk-table tfoot {
    font-size: variables.$table-footer-font-size;
    @if(meta.mixin-exists(hook-table-footer)) {@include hook-table-footer();}
}


/* Caption
 ========================================================================== */

.uk-table caption {
    font-size: variables.$table-caption-font-size;
    text-align: left;
    color: variables.$table-caption-color;
    @if(meta.mixin-exists(hook-table-caption)) {@include hook-table-caption();}
}


/* Alignment modifier
 ========================================================================== */

.uk-table-middle,
.uk-table-middle td { vertical-align: middle !important; }


/* Style modifiers
 ========================================================================== */

/*
 * Divider
 */

.uk-table-divider > tr:not(:first-child),
.uk-table-divider > :not(:first-child) > tr,
.uk-table-divider > :first-child > tr:not(:first-child) {
    border-top: variables.$table-divider-border-width solid variables.$table-divider-border;
    @if(meta.mixin-exists(hook-table-divider)) {@include hook-table-divider();}
}

/*
 * Striped
 */

.uk-table-striped > tr:nth-of-type(odd),
.uk-table-striped tbody tr:nth-of-type(odd) {
    background: variables.$table-striped-row-background;
    @if(meta.mixin-exists(hook-table-striped)) {@include hook-table-striped();}
}

/*
 * Hover
 */

.uk-table-hover > tr:hover,
.uk-table-hover tbody tr:hover {
    background: variables.$table-hover-row-background;
    @if(meta.mixin-exists(hook-table-hover)) {@include hook-table-hover();}
}


/* Active state
 ========================================================================== */

.uk-table > tr.uk-active,
.uk-table tbody tr.uk-active {
    background: variables.$table-row-active-background;
    @if(meta.mixin-exists(hook-table-row-active)) {@include hook-table-row-active();}
}

/* Size modifier
 ========================================================================== */

.uk-table-small th,
.uk-table-small td {
    padding: variables.$table-small-cell-padding-vertical variables.$table-small-cell-padding-horizontal;
    @if(meta.mixin-exists(hook-table-small)) {@include hook-table-small();}
}

.uk-table-large th,
.uk-table-large td {
    padding: variables.$table-large-cell-padding-vertical variables.$table-large-cell-padding-horizontal;
    @if(meta.mixin-exists(hook-table-large)) {@include hook-table-large();}
}


/* Justify modifier
 ========================================================================== */

.uk-table-justify th:first-child,
.uk-table-justify td:first-child { padding-left: 0; }

.uk-table-justify th:last-child,
.uk-table-justify td:last-child { padding-right: 0; }


/* Cell size modifier
 ========================================================================== */

.uk-table-shrink { width: 1px; }
.uk-table-expand { min-width: variables.$table-expand-min-width; }


/* Cell link modifier
 ========================================================================== */

/*
 * Does not work with `uk-table-justify` at the moment
 */

.uk-table-link { padding: 0 !important; }

.uk-table-link > a {
    display: block;
    padding: variables.$table-cell-padding-vertical variables.$table-cell-padding-horizontal;
}

.uk-table-small .uk-table-link > a { padding: variables.$table-small-cell-padding-vertical variables.$table-small-cell-padding-horizontal; }


/* Responsive table
 ========================================================================== */


/* Phone landscape and smaller */
@media (max-width: variables.$breakpoint-small-max) {

    .uk-table-responsive,
    .uk-table-responsive tbody,
    .uk-table-responsive th,
    .uk-table-responsive td,
    .uk-table-responsive tr { display: block; }

    .uk-table-responsive thead { display: none; }

    .uk-table-responsive th,
    .uk-table-responsive td {
        width: auto !important;
        max-width: none !important;
        min-width: 0 !important;
        overflow: visible !important;
        white-space: normal !important;
    }

    .uk-table-responsive th:not(:first-child):not(.uk-table-link),
    .uk-table-responsive td:not(:first-child):not(.uk-table-link),
    .uk-table-responsive .uk-table-link:not(:first-child) > a { padding-top: math.round((variables.$table-cell-padding-vertical * 0.33333)) !important; }

    .uk-table-responsive th:not(:last-child):not(.uk-table-link),
    .uk-table-responsive td:not(:last-child):not(.uk-table-link),
    .uk-table-responsive .uk-table-link:not(:last-child) > a { padding-bottom: math.round((variables.$table-cell-padding-vertical * 0.33333)) !important; }

    .uk-table-justify.uk-table-responsive th,
    .uk-table-justify.uk-table-responsive td {
        padding-left: 0;
        padding-right: 0;
    }

}


// Hooks
// ========================================================================

@if(meta.mixin-exists(hook-table-misc)) {@include hook-table-misc();}

// @mixin hook-table(){}
// @mixin hook-table-header-cell(){}
// @mixin hook-table-cell(){}
// @mixin hook-table-footer(){}
// @mixin hook-table-caption(){}
// @mixin hook-table-row-active(){}
// @mixin hook-table-divider(){}
// @mixin hook-table-striped(){}
// @mixin hook-table-hover(){}
// @mixin hook-table-small(){}
// @mixin hook-table-large(){}
// @mixin hook-table-misc(){}


// Inverse
// ========================================================================




// @mixin hook-inverse-table-header-cell(){}
// @mixin hook-inverse-table-caption(){}
// @mixin hook-inverse-table-row-active(){}
// @mixin hook-inverse-table-divider(){}
// @mixin hook-inverse-table-striped(){}
// @mixin hook-inverse-table-hover(){}
